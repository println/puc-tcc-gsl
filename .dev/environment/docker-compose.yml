version: "3"

networks:
 kong-net:
  driver: bridge

services:

  #######################################
  # Kafka: Kafka
  #######################################
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_CREATE_TOPICS: "gsl.command.freight:1:1,gsl.event.freight:1:1,gsl.document.freight:1:1,gsl.event.order:1:1,gsl.command.order:1:1,gsl.document.order:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock      
      
  #######################################
  # Kafka-UI: Kafka GUI
  #######################################
  kafka-ui:
    image: provectuslabs/kafka-ui
    depends_on:
      - zookeeper
      - kafka
    container_name: kafka-ui
    ports:
      - 8989:8080
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${HOST_IP}:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER=localhost: 2181

  #######################################
  # Postgres: The database used by Kong and Services
  #######################################
  postgres-database:
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_USERS: "kong:kong|gsl:gsl|postgres:postgres"
      POSTGRES_DATABASES : "kong:kong|orderdb:gsl|freightdb:gsl|collectiondb:gsl|transportationdb:gsl|deliverydb:gsl|partnershipdb:gsl|customerdb:gsl"
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: postgres -c 'max_connections=500'
    volumes:
       - ./postgres:/docker-entrypoint-initdb.d
       
  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_PG_HOST: postgres-database
      KONG_DATABASE: postgres
      KONG_PG_PASSWORD: kong
    links:
      - postgres-database
    depends_on:
      - postgres-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_DATABASE: "off" ##remove this to use database
      KONG_DECLARATIVE_CONFIG: /etc/kong/declarative/kong.yml
    depends_on:
      - postgres-database
      - kong-migration      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8001:8001"
      - "8000:8000"
    volumes:
      - ./kong:/etc/kong/declarative  

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong:kong@postgres-database:5432/konga_db"
    environment:
      DB_ADAPTER: postgres
      DB_HOST: postgres-database
      DB_USER: kong
      DB_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    links:
      - postgres-database
    depends_on:
      - postgres-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    restart: always
    networks:
        - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: postgres-database
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - postgres-database
      - konga-prepare
    ports:
      - "1337:1337"